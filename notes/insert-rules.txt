 #######################
 ### Insertion rules ###
 #######################

	NOTE:
	The upwards/same-level/downwards insertions are only methods here due
	to organisation reasons. They should be part of the regular insert
	as to not occupy as much of the call stack.


	////////////////////////

	*insert* (T element) {

	if 

	else if the tree is empty:
		change current element's data to element

	else if the element is smaller than the tree's current data:
		call *upwards-insert*

	else if the tree has space:
		call *same-level-insert*

	else
		call *downwards-insert*
	}


	////////////////////////

	*upwards-insert* {
		change current tree's data to element
		change every first child of this tree's data to its parent
	}


	////////////////////////

	*same-level-insert* {

	}


	////////////////////////

	*downwards-insert* {

	}



	/////// Option 2 ///////

	*insert* (elem) {

		Create iterator
		Run through iterator until
			find first element > elem (top)
			find last element < elem (bottom)

		

	}
